import re

from aiogram import md, types
from odmantic import AIOEngine

from support.bots import dp
from support.models import UserType
from support.models.blueprint_model import SLOT_MAPPING, BlueprintType, TierType
from support.models.items_model import ItemType


@dp.message_handler(text="üñ• –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å", global_admin=True)
@dp.message_handler(
    commands="cancel",
    global_admin=True,
    regexp_fsm=r"add_item|add_blueprint|add_tier|add_tier_description",
)
async def show_panel(message: types.Message, user: UserType, mongo: AIOEngine):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(*["–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", "–î–æ–±–∞–≤–∏—Ç—å —Ç–∏—Ä", "–í—Å–µ —Ä–µ—Å—É—Ä—Å—ã", "‚óÄÔ∏è–ù–∞–∑–∞–¥"])
    out = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É"
    user.fsm = ""
    user.fsm_addons = ""
    await mongo.save(user)
    await message.answer(out, reply_markup=kb)


@dp.message_handler(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", global_admin=True)
async def add_item(message: types.Message, user: UserType, mongo: AIOEngine):
    user.fsm = "add_item"
    await mongo.save(user)
    await message.answer(
        f"–í–≤–µ–¥–∏ {md.hcode('item_id - item_name')}\n–ù–∞–ø—Ä–∏–º–µ—Ä: {md.hcode('101 - üëî–†–≤–∞–Ω—ã–π –ö–æ—Å—Ç—é–º')}\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )


@dp.message_handler(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", global_admin=True)
async def add_blueprint(message: types.Message, user: UserType, mongo: AIOEngine):
    user.fsm = "add_blueprint"
    await mongo.save(user)
    await message.answer(
        f"–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ä–≤–∞—Ä–¥ —Å–æ–æ–±—â–µ–Ω–∏—è\n(–ó–∞–∫–∞–∑ –¥–ª—è —Ç–∞–∫–æ–≥–æ-—Ç–æ —Ö—É—è –Ω–∞ —Ç–∞–∫—É—é-—Ç–æ —Ö—É–π–Ω—é)\n–¥–æ—Å—Ç—É–ø–Ω—ã–π —É –∫—Ä–∞—Ñ—Ç–æ—Ä–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ {md.hcode('/order_NameTier')}\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )


@dp.message_handler(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–∏—Ä", global_admin=True)
async def add_tier(message: types.Message, user: UserType, mongo: AIOEngine):
    user.fsm = "add_tier"
    await mongo.save(user)
    await message.answer(
        f"–í–≤–µ–¥–∏ {md.hcode('tier_id - icon')}\n–ù–∞–ø—Ä–∏–º–µ—Ä: {md.hcode('11 - üåû')}\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )


@dp.message_handler(my_state="add_item", global_admin=True)
async def create_item(message: types.Message, mongo: AIOEngine):
    item_info = re.search(r"(?P<item_id>\d+) - (?P<item_name>.*)", message.text)
    if not item_info:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel"
        )
        return
    item = ItemType(item_id=int(item_info.group("item_id")), name=item_info.group("item_name"))
    await mongo.save(item)
    await message.answer("–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –¥–æ–±–∞–≤—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel")


@dp.message_handler(my_state="add_tier", global_admin=True)
async def create_tier(message: types.Message, user: UserType, mongo: AIOEngine):
    tier_info = re.search(r"(?P<tier_id>\d+) - (?P<tier_icon>.*)", message.text)
    if not tier_info:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏—Ä–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel"
        )
        return
    addon = {"tier_id": int(tier_info.group("tier_id")), "tier_icon": tier_info.group("tier_icon")}
    user.fsm_addons = addon
    user.fsm = "add_tier_description"
    await mongo.save(user)
    await message.answer("–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–∏—Ä–∞")


@dp.message_handler(my_state="add_tier_description", global_admin=True)
async def create_tier_description(message: types.Message, user: UserType, mongo: AIOEngine):
    tier = TierType(
        tier_id=user.fsm_addons["tier_id"],
        icon=user.fsm_addons["tier_icon"],
        description=message.text,
    )
    user.fsm = "add_tier"
    user.fsm_addons = ""
    await mongo.save_all([tier, user])
    await message.answer("–ù–æ–≤—ã–π —Ç–∏—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –¥–æ–±–∞–≤—å –µ—â—ë –∏–ª–∏ /cancel")


@dp.message_handler(
    my_state="add_blueprint", global_admin=True, is_forwarded=True, regexp=r"–ó–∞–∫–∞–∑ –¥–ª—è"
)
async def create_blueprint(message: types.Message, user: UserType, mongo: AIOEngine):
    text = message.text
    pattern_items = re.compile(
        r"(‚ùå|‚úÖ)(?P<item_name>.*) (?P<current_items>\d+)\/(?P<need_items>\d+)"
    )
    pattern_name = re.compile(r"–ó–∞–∫–∞–∑ –¥–ª—è .*\n–Ω–∞ (?P<item_name>.*)")
    blueprint_name = pattern_name.search(text).group("item_name")
    slot = None
    for slot_ in SLOT_MAPPING:
        if slot_ in blueprint_name:
            slot = SLOT_MAPPING[slot_]
            break
    blueprint_items = pattern_items.findall(text)
    blueprint = await mongo.find_one(BlueprintType, BlueprintType.name == blueprint_name)
    if not blueprint:
        blueprint = BlueprintType(name=blueprint_name, slot=slot)
    for items in blueprint_items:
        if item := await mongo.find_one(ItemType, ItemType.name == items[1]):
            blueprint.items.append(item.short(int(items[3])))
        else:
            await message.answer(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {items[1]}")
            return

    user.fsm_addons = blueprint.id
    user.fsm = "add_blueprint_tier"
    await mongo.save_all([blueprint, user])
    await message.answer("–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–∏—Ä –ø—Ä–µ–¥–º–µ—Ç–∞")


@dp.message_handler(my_state="add_blueprint_tier", global_admin=True)
async def create_blueprint(message: types.Message, user: UserType, mongo: AIOEngine):
    try:
        tier = int(message.text)
        if tier := await mongo.find_one(TierType, TierType.tier_id == tier):
            blueprint = await mongo.find_one(BlueprintType, BlueprintType.id == user.fsm_addons)
            blueprint.tier = tier.id
            user.fsm_addons = ""
            user.fsm = "add_blueprint"
            await mongo.save_all([blueprint, user])
            await message.answer("–ß–µ—Ä—Ç—ë–∂ –¥–æ–±–∞–≤–ª–µ–Ω, –¥–æ–±–∞–≤—å –µ—â—ë –∏–ª–∏ /cancel")
        else:
            raise ValueError
    except Exception:
        await message.answer("–¢–∏—Ä –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel")
