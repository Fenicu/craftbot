from typing import List

from aiogram import md, types
from odmantic import AIOEngine

from support.bots import dp
from support.models import UserType
from support.models.blueprint_model import BlueprintType, TierType
from support.models.items_model import EmbeddedItemType, ItemType


@dp.message_handler(text="üñ• –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å", global_admin=True)
async def show_panel(message: types.Message, user: UserType, mongo: AIOEngine):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    kb.add(
        *[
            "üÜï–î–æ–±–∞–≤–ª–µ–Ω–∏–µ",
            "üî§–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "–í—Å–µ —Ä–µ—Å—É—Ä—Å—ã",
            "‚óÄÔ∏è–ù–∞–∑–∞–¥",
        ]
    )
    users_count = await mongo.count(UserType)
    users_bags = await mongo.count(UserType, UserType.bag.items != [])
    items_count = await mongo.count(ItemType)
    tier_count = await mongo.count(TierType)
    bp_count = await mongo.count(BlueprintType)
    out = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!\n\n"
    out += f"–í –±–æ—Ç–µ {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏–∑ –Ω–∏—Ö {users_bags} –æ–±–Ω–æ–≤–ª—è–ª–∏ —Å–≤–æ–∏ —Ä—é–∫–∑–∞–∫–∏\n\n"
    out += f"{md.hbold('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')}\n"
    out += f"–ü—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {md.hbold(items_count)}\n"
    out += f"–¢–∏—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {md.hbold(tier_count)}\n"
    out += f"–†–µ—Ü–µ–ø—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {md.hbold(bp_count)}\n"
    user.fsm = ""
    user.fsm_addons = ""
    await mongo.save(user)
    await message.answer(out, reply_markup=kb)


@dp.message_handler(text="üÜï–î–æ–±–∞–≤–ª–µ–Ω–∏–µ", global_admin=True)
@dp.message_handler(
    commands="cancel",
    global_admin=True,
    regexp_fsm=r"add_item|add_blueprint|add_tier|add_tier_description",
)
async def show_panel(message: types.Message, user: UserType, mongo: AIOEngine):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    kb.add(
        *[
            "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç",
            "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç",
            "–î–æ–±–∞–≤–∏—Ç—å —Ç–∏—Ä",
            "‚óÄÔ∏è–ù–∞–∑–∞–¥",
        ]
    )
    out = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
    user.fsm = ""
    user.fsm_addons = ""
    await mongo.save(user)
    await message.answer(out, reply_markup=kb)


@dp.message_handler(text="–í—Å–µ —Ä–µ—Å—É—Ä—Å—ã", global_admin=True)
async def get_all_items(message: types.Message, mongo: AIOEngine):
    users = mongo.find(UserType, UserType.bag.items != [])
    all_items: List[EmbeddedItemType] = []
    async for user in users:
        for item in user.bag.items:
            for item_ in all_items:
                if item_.item_id == item.item_id:
                    item_.count += item.count
                    break
            else:
                all_items.append(item)

    all_items = sorted(all_items, key=lambda item: item.count, reverse=True)
    count = await mongo.count(UserType, UserType.bag.items != [])
    out = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Ä—É–∫–∞—Ö —É {count} –∏–≥—Ä–æ–∫–æ–≤:\n"
    for item in all_items:
        item_obj = await mongo.find_one(ItemType, ItemType.id == item.item_id)
        out += f"{md.hbold(item_obj.name)}: {item.count} ({round(item_obj.evaluation, 3)} ü¶Ñ)\n"

    await message.answer(out)
