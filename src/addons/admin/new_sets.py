import re

from aiogram import md, types
from loguru import logger
from odmantic import AIOEngine

from support.bots import dp
from support.models import UserType
from support.models.blueprint_model import SLOT_MAPPING, BlueprintType, TierType
from support.models.collections_model import CollectionType
from support.models.items_model import ItemType


@dp.message_handler(text="–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ç", global_admin=True)
async def add_collection(message: types.Message, user: UserType, mongo: AIOEngine):
    user.fsm = "add_collection"
    await mongo.save(user)
    await message.answer(
        f"–í–≤–µ–¥–∏ {md.hcode('collection_icon - collection_name')}\n–ù–∞–ø—Ä–∏–º–µ—Ä: {md.hcode('üß∏ - –°–æ–Ω—è')}\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )


@dp.message_handler(text="–î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Ñ—Ç –≤ —Å–µ—Ç", global_admin=True)
async def add_bp_in_collection(message: types.Message, user: UserType, mongo: AIOEngine):
    user.fsm = "add_bp_in_collection"
    await mongo.save(user)
    await message.answer(
        f"–í–≤–µ–¥–∏ {md.hcode('set_icon:tier_id:slot:item_id:item_count')}\n–ù–∞–ø—Ä–∏–º–µ—Ä: {md.hcode('üß∏:18:right:118:15')}\n\n"
        "–≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –º—ã –¥–æ–±–∞–≤–∏–º üì±iBlackM (+57üî®, +29üéì) (18 —Ç–∏—Ä, —Å–ª–æ—Ç right) –≤ —Å–µ—Ç üß∏–°–æ–Ω—è"
        " –∏ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ –µ–º—É –Ω–∞–¥–æ 15 üíΩ–ü—Ä–æ—à–∏–≤–∫–∞\n\n"
        "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –≤–µ—â–∞–º:\n"
        f"üì± - {md.hcode('right')}\n"
        f"‚åöÔ∏è - {md.hcode('left')}\n"
        f"üï∂ - {md.hcode('head')}\n"
        f"üëû - {md.hcode('legs')}\n"
        f"üëï - {md.hcode('chest')}\n"
        f"üëî - {md.hcode('torso')}\n"
        f"üíª - {md.hcode('book')}\n"
        f"üíç - {md.hcode('ring')}\n\n"
        f"üíé - {md.hcode('117')}\n"
        f"üíΩ - {md.hcode('118')}\n"
        f"üß∂ - {md.hcode('107')}\n"
        f"üìø - {md.hcode('108')}\n"
        "\n\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )


@dp.message_handler(my_state="add_bp_in_collection", global_admin=True)
async def create_bp_in_collection(message: types.Message, mongo: AIOEngine):
    item_info = re.search(
        r"(?P<set_icon>.*):(?P<tier_id>\d+):(?P<slot>.*):(?P<item_id>\d+):(?P<item_count>\d+)",
        message.text,
    )
    if not item_info:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel"
        )
        return
    tier = await mongo.find_one(TierType, TierType.tier_id == int(item_info.group("tier_id")))
    if not tier:
        await message.answer(
            f"–¢–∏—Ä {item_info.group('tier_id')} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel"
        )
        return
    bp = await mongo.find_one(
        BlueprintType,
        (BlueprintType.tier == tier.id) & (BlueprintType.slot == item_info.group("slot")),
    )
    if not bp:
        await message.answer("–¢–∞–∫–æ–π –∫—Ä–∞—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel")
        return

    collection = await mongo.find_one(
        CollectionType,
        CollectionType.icon == item_info.group("set_icon"),
    )
    if not collection:
        await message.answer(
            f"–°–µ—Ç {item_info.group('set_icon')} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel"
        )
        return

    item = await mongo.find_one(ItemType, ItemType.item_id == int(item_info.group("item_id")))
    if not item:
        await message.answer(
            f"–ü—Ä–µ–¥–º–µ—Ç {item_info.group('item_id')} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel"
        )
        return

    data = {str(collection.id): {str(item.item_id): int(item_info.group("item_count"))}}
    bp.collections.append(data)
    await mongo.save(bp)
    await message.answer(
        f"–í –∫—Ä–∞—Ñ—Ç {bp.name} –¥–æ–±–∞–≤–ª–µ–Ω–æ {item.name} {item_info.group('item_count')}—à—Ç. –¥–ª—è —Å–µ—Ç–∞ {collection.icon}{collection.name}\n\n–¥–æ–±–∞–≤—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel"
    )


@dp.message_handler(my_state="add_collection", global_admin=True)
async def create_collection(message: types.Message, mongo: AIOEngine):
    item_info = re.search(r"(?P<collection_icon>.*) - (?P<collection_name>.*)", message.text)
    if not item_info:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel"
        )
        return
    collection = CollectionType(
        icon=item_info.group("collection_icon"),
        name=item_info.group("collection_name"),
    )
    await mongo.save(collection)
    await message.answer("–°–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –¥–æ–±–∞–≤—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel")
