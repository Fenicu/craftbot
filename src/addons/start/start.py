import re
from datetime import datetime
from math import ceil
from typing import List

from aiogram import types
from loguru import logger
from odmantic.engine import AIOEngine

from support.bots import dp
from support.models import UserType
from support.models.bag_model import BagType
from support.models.items_model import EmbeddedItemType, ItemType


@dp.message_handler(commands=["start", "help"])
@dp.message_handler(text="‚óÄÔ∏è–ù–∞–∑–∞–¥")
async def starting(message: types.Message, user: UserType, mongo: AIOEngine):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = ["‚öí–ö—Ä–∞—Ñ—Ç", "üóú–ú–∞—Å—Å –∫—Ä–∞—Ñ—Ç", "üî®–ú–∞—Å—Ç–µ—Ä—Å–∫–∏–µ"]
    if user.admin:
        buttons.append("üñ• –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å")
    kb.add(*buttons)
    out = "–ë–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–∏ –∫—Ä–∞—Ñ—Ç–µ\n–ö–∞–Ω–∞–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ ‚Äî @swcraftupdate"
    await message.answer(out, reply_markup=kb)
    user.fsm = ""
    user.fsm_addons = ""
    await mongo.save(user)


@dp.message_handler(commands=["clear"])
async def starting(message: types.Message, user: UserType, mongo: AIOEngine):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = ["‚öí–ö—Ä–∞—Ñ—Ç", "üóú–ú–∞—Å—Å –∫—Ä–∞—Ñ—Ç", "üî®–ú–∞—Å—Ç–µ—Ä—Å–∫–∏–µ"]
    if user.admin:
        buttons.append("üñ• –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å")
    kb.add(*buttons)
    user.bag = BagType()
    logger.debug("{}({}) –æ—á–∏—Å—Ç–∏–ª —Ä—é–∫–∑–∞–∫", user.name, user.telegram_id)
    await mongo.save(user)
    out = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –±—ã–ª –æ—á–∏—â–µ–Ω"
    await message.answer(out, reply_markup=kb)


@dp.message_handler(regexp="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ /myorders")
async def update_bag(message: types.Message, user: UserType, mongo: AIOEngine):
    items: List[EmbeddedItemType] = []
    bag_evaluation = 0
    for line in message.text.splitlines():
        if "–¢–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã" in line or "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" in line:
            continue
        if not line:
            continue
        if " - " in line:
            item_info = re.search(r"(?P<item_name>.*) - (?P<item_count>\d+) —à—Ç.", line)
            if item := await mongo.find_one(
                ItemType, ItemType.name == item_info.group("item_name")
            ):
                count = int(item_info.group("item_count"))
                bag_evaluation += count * item.evaluation
                items.append(item.short(count=count))
        else:
            if item := await mongo.find_one(ItemType, ItemType.name == line):
                count = 1
                bag_evaluation += count * item.evaluation
                items.append(item.short(count=count))

    user.bag.items = items
    user.bag.last_update = datetime.now()
    await mongo.save(user)
    logger.debug("{}({}) –æ–±–Ω–æ–≤–∏–ª —Ä—é–∫–∑–∞–∫", user.name, user.telegram_id)
    kb = types.InlineKeyboardMarkup()
    kb.insert(types.InlineKeyboardButton(text="‚öí–ö—Ä–∞—Ñ—Ç", callback_data=f"find_tiers"))
    await message.answer(
        f"–†—é–∫–∑–∞–∫ –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω\n–û—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {ceil(bag_evaluation)}ü¶Ñ",
        reply_markup=kb,
    )
