import re
from datetime import datetime
from math import ceil
from typing import List

from aiogram import md, types
from bson import ObjectId
from loguru import logger
from odmantic.engine import AIOEngine

from support.bots import dp
from support.models import UserType
from support.models.bag_model import BagType
from support.models.group import GroupType
from support.models.items_model import EmbeddedItemType, ItemType
from support.models.users_in_groups import UserInGroupType


@dp.message_handler(commands=["start", "help"])
@dp.message_handler(text="‚óÄÔ∏è–ù–∞–∑–∞–¥")
async def starting(message: types.Message, user: UserType, mongo: AIOEngine):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = ["‚öí–ö—Ä–∞—Ñ—Ç", "üóú–ú–∞—Å—Å –∫—Ä–∞—Ñ—Ç", "üî®–ú–∞—Å—Ç–µ—Ä—Å–∫–∏–µ", "üöº–ì—Ä—É–ø–ø—ã"]
    if user.admin:
        buttons.append("üñ• –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å")
    kb.add(*buttons)
    out = "–ë–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–∏ –∫—Ä–∞—Ñ—Ç–µ\n–ö–∞–Ω–∞–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ ‚Äî @swcraftupdate"
    await message.answer(out, reply_markup=kb)
    user.fsm = ""
    user.fsm_addons = ""
    await mongo.save(user)


@dp.message_handler(commands=["clear"])
async def clear_bag(message: types.Message, user: UserType, mongo: AIOEngine):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = ["‚öí–ö—Ä–∞—Ñ—Ç", "üóú–ú–∞—Å—Å –∫—Ä–∞—Ñ—Ç", "üî®–ú–∞—Å—Ç–µ—Ä—Å–∫–∏–µ", "üöº–ì—Ä—É–ø–ø—ã"]
    if user.admin:
        buttons.append("üñ• –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å")
    kb.add(*buttons)
    user.bag = BagType()
    logger.debug("{}({}) –æ—á–∏—Å—Ç–∏–ª —Ä—é–∫–∑–∞–∫", user.name, user.telegram_id)
    await mongo.save(user)
    out = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –±—ã–ª –æ—á–∏—â–µ–Ω"
    await message.answer(out, reply_markup=kb)


async def get_diff(
    old_items: List[EmbeddedItemType],
    new_items: List[EmbeddedItemType],
    mongo: AIOEngine,
) -> str:
    text = "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ:\n\n"
    for oitem in old_items:
        item = await mongo.find_one(ItemType, ItemType.id == oitem.item_id)
        for nitem in new_items:
            if nitem.item_id == oitem.item_id:
                break
        else:
            text += f"üî¥ {item.name} -{oitem.count}\n"
            continue

        if nitem.count > oitem.count:
            text += f"üü¢ {item.name} +{nitem.count-oitem.count}\n"
        elif nitem.count < oitem.count:
            text += f"üî¥ {item.name} -{oitem.count-nitem.count}\n"
        continue

    return text


@dp.message_handler(regexp="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ /myorders")
async def update_bag(message: types.Message, user: UserType, mongo: AIOEngine):
    items: List[EmbeddedItemType] = []
    bag_evaluation = 0
    for line in message.text.splitlines():
        if "–¢–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã" in line or "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" in line:
            continue
        if not line:
            continue
        if " - " in line:
            item_info = re.search(r"(?P<item_name>.*) - (?P<item_count>\d+) —à—Ç.", line)
            if item := await mongo.find_one(
                ItemType, ItemType.name == item_info.group("item_name")
            ):
                count = int(item_info.group("item_count"))
                bag_evaluation += count * item.evaluation
                items.append(item.short(count=count))
        else:
            if item := await mongo.find_one(ItemType, ItemType.name == line):
                count = 1
                bag_evaluation += count * item.evaluation
                items.append(item.short(count=count))

    old_items = user.bag.items.copy()
    user.bag.items = items
    current_items = user.bag.items.copy()
    diff_message = await get_diff(old_items, current_items, mongo)
    diff_date = user.bag.last_update
    user.bag.last_update = datetime.now()
    await mongo.save(user)
    logger.debug("{}({}) –æ–±–Ω–æ–≤–∏–ª —Ä—é–∫–∑–∞–∫", user.name, user.telegram_id)
    kb = types.InlineKeyboardMarkup()
    kb.insert(types.InlineKeyboardButton(text="‚öí–ö—Ä–∞—Ñ—Ç", callback_data=f"find_tiers"))
    await message.answer(
        f"–†—é–∫–∑–∞–∫ –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω\n–û—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {ceil(bag_evaluation)}ü¶Ñ\n{diff_message}\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç {diff_date.strftime('%d.%m.%Y %H:%M')}",
        reply_markup=kb,
    )


@dp.message_handler(text="üöº–ì—Ä—É–ø–ø—ã", global_admin=True)
async def show_groups(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(*["–ú–æ–∏ –≥—Ä—É–ø–ø—ã", "–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", "‚óÄÔ∏è–ù–∞–∑–∞–¥"])

    out = "–í –≥—Ä—É–ø–ø–∞—Ö —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä—é–∫–∑–∞–∫–∏ —Ç–æ–≤–∞—Ä–∏—â–µ–π"
    await message.answer(out, reply_markup=kb)


@dp.message_handler(text="–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
async def create_group(message: types.Message, user: UserType, mongo: AIOEngine):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ["‚óÄÔ∏è–ù–∞–∑–∞–¥"]
    kb.add(*buttons)
    user.fsm = "set_group_name"
    await mongo.save(user)
    out = "–î–∞–π –∏–º—è –≥—Ä—É–ø–ø–µ"
    await message.answer(out, reply_markup=kb)


@dp.message_handler(my_state="set_group_name")
async def set_group_name(message: types.Message, user: UserType, mongo: AIOEngine):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(*["–ú–æ–∏ –≥—Ä—É–ø–ø—ã", "–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", "‚óÄÔ∏è–ù–∞–∑–∞–¥"])
    user.fsm = ""
    group = GroupType(owner=message.from_user.id, name=message.text)
    new_group = await mongo.save(group)
    add_user_in_group = UserInGroupType(group=new_group.id, user=message.from_user.id)
    await mongo.save_all([user, add_user_in_group])
    out = f"–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{md.hcode(new_group.join_command)}"
    await message.answer(out, reply_markup=kb)


@dp.message_handler(commands=["join"])
async def join_group(message: types.Message, mongo: AIOEngine):
    try:
        group_id = ObjectId(message.get_args())
        group = await mongo.find_one(GroupType, GroupType.id == group_id)
        if not group:
            await message.answer("–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        user_in_group = await mongo.find_one(
            UserInGroupType,
            UserInGroupType.group == group_id,
            UserInGroupType.user == message.from_user.id,
        )
        if user_in_group:
            await message.answer("–¢—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –≥—Ä—É–ø–ø–µ")
            return
    except Exception:
        pass

    add_user_in_group = UserInGroupType(group=group.id, user=message.from_user.id)
    await mongo.save(add_user_in_group)

    await message.answer(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É {group.name}")


@dp.message_handler(text="–ú–æ–∏ –≥—Ä—É–ø–ø—ã", global_admin=True)
async def show_groups(message: types.Message, mongo: AIOEngine):
    user_groups = await mongo.find(
        UserInGroupType,
        UserInGroupType.user == message.from_user.id,
    )
    ids = [g.id for g in user_groups]
    user_group = await mongo.find(GroupType, GroupType.id in ids)
    # TODO
